# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13Mz6yuXa2xhfSSeEkXPL0CtSs9YoWIkr
"""

from collections import defaultdict
import numpy as np

def start_translation_chances(sentences):
    # Create a default dictionary for storing the translation probabilities
    translation_prob = defaultdict(lambda: defaultdict(lambda: 0.0))
    # Initialize translation probabilities uniformly
    for pair in sentences:
        e, f = pair
        prob = 1 / len(f)
        for e_word in e:
            for f_word in f:
                translation_prob[e_word][f_word] = prob
    return translation_prob

def learn_translation_chances(sentences, repeat=10):
    # Initialize translation probabilities
    t = start_translation_chances(sentences)

    for i in range(repeat):
        print(f"Iteration {i+1}")

        # Initialize counts
        count = defaultdict(lambda: defaultdict(float))
        total = defaultdict(float)

        # E-step: Collect counts
        for e, f in sentences:
            s_total = defaultdict(float)
            for e_word in e:
                s_total[e_word] = 0
                for f_word in f:
                    s_total[e_word] += t[e_word][f_word]
            for e_word in e:
                for f_word in f:
                    increment = t[e_word][f_word] / s_total[e_word]
                    count[e_word][f_word] += increment
                    total[f_word] += increment
        # M-step: Update probabilities
        for f_word in total:
            for e_word in count:
                t[e_word][f_word] = count[e_word][f_word] / total[f_word]

        # Print s_total and counts for each iteration
        print(f"s_total: {dict(s_total)}")
        print(f"counts: {dict(count)}")
        print(f"total(f): {dict(total)}")
    return t

sentences = [
    (['dışarı','çıkalım','mı'], ['shall','we','go', 'out']),
    (['yemek','yiyelim'], ['Lets','have','dinner']),
    (['nerelisin'], ['where', 'are','you','from']),
    (['sıkıldım'], ['I', 'am','bored']),
    ( ['hava','nasıl'],['how', 'is','the','weather'])
]

translation_chances = learn_translation_chances(sentences)

from nltk.translate import IBMModel1, AlignedSent

aligned_text = [AlignedSent(pair[0], pair[1]) for pair in sentences]
ibm1 = IBMModel1(aligned_text, 10)

# Compare the translation probabilities
for e_word in translation_chances:
    for f_word in translation_chances[e_word]:
        print(f"Custom Implementation t({e_word}|{f_word}): {translation_chances[e_word][f_word]}")
        print(f"NLTK Implementation t({e_word}|{f_word}): {ibm1.translation_table[e_word][f_word]}")

# Record the output of the last iteration
print("Translation Probabilities After Last Iteration:")
for e_word in translation_chances:
    for f_word in translation_chances[e_word]:
        print(f"t({e_word}|{f_word}): {translation_chances[e_word][f_word]}")